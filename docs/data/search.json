{"list":[{"title":"AttenuatedBloomFilter.from","link":"<a href=\"AttenuatedBloomFilter.html#.from\">from</a>","description":"<p>Constructs a attentuated bloom filter from a array of hex strings</p>"},{"title":"module:blossom","link":"<a href=\"module-blossom.html\">blossom</a>"},{"title":"module:blossom.bitfield","link":"<a href=\"module-blossom.html#.bitfield\">bitfield</a>","description":"<p>{@link module:blossom/bitfield}</p>"},{"title":"module:blossom.bloom","link":"<a href=\"module-blossom.html#.bloom\">bloom</a>","description":"<p>{@link module:blossom/bloom}</p>"},{"title":"module:blossom.fnv","link":"<a href=\"module-blossom.html#.fnv\">fnv</a>","description":"<p>{@link module:blossom/fnv}</p>"},{"title":"module:blossom/bitfield","link":"<a href=\"module-blossom_bitfield.html\">blossom/bitfield</a>","description":"<p>A bit field is a data structure that maps to one or more adjacent\nbits which have been allocated for specific purposes, so that any\nsingle bit or group of bits within the structure can be set or inspected.\nA bit field is most commonly used to represent integral types of known,\nfixed bit-width, such as single-bit Booleans.</p>"},{"title":"module:blossom/bitfield~Bitfield","link":"<a href=\"module-blossom_bitfield-Bitfield.html\">Bitfield</a>","description":"<p>A bitfield backed by a node.js Buffer.</p>"},{"title":"module:blossom/bitfield~Bitfield#get","link":"<a href=\"module-blossom_bitfield-Bitfield.html#get\">get</a>","description":"<p>Returns the value of the bit at the given index.</p>"},{"title":"module:blossom/bitfield~Bitfield#set","link":"<a href=\"module-blossom_bitfield-Bitfield.html#set\">set</a>","description":"<p>Set the bit value at the given index.</p>"},{"title":"module:blossom/bitfield~Bitfield#toBuffer","link":"<a href=\"module-blossom_bitfield-Bitfield.html#toBuffer\">toBuffer</a>","description":"<p>Returns the underlying buffer.</p>"},{"title":"module:blossom/bitfield~Bitfield#toggle","link":"<a href=\"module-blossom_bitfield-Bitfield.html#toggle\">toggle</a>","description":"<p>Flips the bit at the given index.</p>"},{"title":"module:blossom/bloom","link":"<a href=\"module-blossom_bloom.html\">blossom/bloom</a>","description":"<p>A Bloom filter is a space-efficient probabilistic data structure used to test\nwhether an element is a member of a set. It can quickly indicate if an item\nis definitely not in the set or possibly in the set, but it may produce false\npositives. Blossom implements several Bloom filters. All use the FNV Hash function\nand the optimization described by Kirsch and Mitzenmacher.</p>"},{"title":"module:blossom/bloom.calculateSize","link":"<a href=\"module-blossom_bloom.html#.calculateSize\">calculateSize</a>","description":"<p>Determines the appropriate size attribute given a capacity and error rate.</p>"},{"title":"module:blossom/bloom~AttenuatedBloomFilter","link":"<a href=\"module-blossom_bloom-AttenuatedBloomFilter.html\">AttenuatedBloomFilter</a>","description":"<p>Constructs an empty attenuated bloom filter given a bitfield size\nand a filter depth.</p>"},{"title":"module:blossom/bloom~AttenuatedBloomFilter#merge","link":"<a href=\"module-blossom_bloom-AttenuatedBloomFilter.html#merge\">merge</a>","description":"<p>Merges a foreign attenuated filter into ours.</p>"},{"title":"module:blossom/bloom~AttenuatedBloomFilter#toHexArray","link":"<a href=\"module-blossom_bloom-AttenuatedBloomFilter.html#toHexArray\">toHexArray</a>","description":"<p>Returns an array of hex string serialized filters.</p>"},{"title":"module:blossom/bloom~AttenuatedBloomFilter#toString","link":"<a href=\"module-blossom_bloom-AttenuatedBloomFilter.html#toString\">toString</a>","description":"<p>Returns a comma delimited string of each filter serialized to hex strings.</p>"},{"title":"module:blossom/bloom~BloomFilter","link":"<a href=\"module-blossom_bloom-BloomFilter.html\">BloomFilter</a>","description":"<p>Classic Bloom filter dimensioned by the size of the bitfield\nand the number of hash functions.</p>"},{"title":"module:blossom/bloom~BloomFilter#add","link":"<a href=\"module-blossom_bloom-BloomFilter.html#add\">add</a>","description":"<p>Add an item to the Bloom filter.</p>"},{"title":"module:blossom/bloom~BloomFilter#has","link":"<a href=\"module-blossom_bloom-BloomFilter.html#has\">has</a>","description":"<p>Check if an item probably exists in the Bloom filter</p>"},{"title":"module:blossom/bloom~BloomFilter.destringify","link":"<a href=\"module-blossom_bloom-BloomFilter.html#.destringify\">destringify</a>","description":"<p>Create a {@link BloomFilter} from an object.</p>"},{"title":"module:blossom/bloom~SafeBloomFilter","link":"<a href=\"module-blossom_bloom-SafeBloomFilter.html\">SafeBloomFilter</a>","description":"<p>Bloom filter enforcing a given false positive error\nprobabilty for a given capacity.</p>"},{"title":"module:blossom/bloom~SafeBloomFilter#add","link":"<a href=\"module-blossom_bloom-SafeBloomFilter.html#add\">add</a>","description":"<p>Adds item the the Bloom filter only if it is under capacity.</p>"},{"title":"module:blossom/bloom~SafeBloomFilter#has","link":"<a href=\"module-blossom_bloom-SafeBloomFilter.html#has\">has</a>","description":"<p>Checks if the given item probably exists in the Bloom filter.</p>"},{"title":"module:blossom/bloom~SafeBloomFilter.destringify","link":"<a href=\"module-blossom_bloom-SafeBloomFilter.html#.destringify\">destringify</a>","description":"<p>Create a {@link SafeBloomFilter} from an object</p>"},{"title":"module:blossom/bloom~ScalingBloomFilter","link":"<a href=\"module-blossom_bloom-ScalingBloomFilter.html\">ScalingBloomFilter</a>","description":"<p>A scaling bloom filter (SBF) as described by Almeida et al.</p>"},{"title":"module:blossom/bloom~ScalingBloomFilter#add","link":"<a href=\"module-blossom_bloom-ScalingBloomFilter.html#add\">add</a>","description":"<p>Add item to the SBF</p>"},{"title":"module:blossom/bloom~ScalingBloomFilter#has","link":"<a href=\"module-blossom_bloom-ScalingBloomFilter.html#has\">has</a>","description":"<p>Checks if an item probably exists in the filter</p>"},{"title":"module:blossom/bloom~ScalingBloomFilter.destringify","link":"<a href=\"module-blossom_bloom-ScalingBloomFilter.html#.destringify\">destringify</a>","description":"<p>Create a {@link ScalingBloomFilter} from an object</p>"},{"title":"module:blossom/bloom~calculateSlices","link":"<a href=\"module-blossom_bloom.html#~calculateSlices\">calculateSlices</a>","description":"<p>Determines how many slices the filter should use for hashing.</p>"},{"title":"module:blossom/bloom~calulateHashes","link":"<a href=\"module-blossom_bloom.html#~calulateHashes\">calulateHashes</a>","description":"<p>Calculates the hashes for an item in a Bloom filter.</p>"},{"title":"module:blossom/fnv","link":"<a href=\"module-blossom_fnv.html\">blossom/fnv</a>","description":"<p>FNV (Fowler/Noll/Vo) is a fast,\nnon-cryptographic hash algorithm with good dispersion.\nFNV hashes are designed to be fast while maintaining a low collision\nrate. The high dispersion of the FNV hashes makes them well suited\nfor hashing nearly identical strings such as URLs, hostnames,\nfilenames, text, IP addresses, etc. Their speed allows one to quickly\nhash lots of data while maintaining a reasonably low collision rate.\nHowever, they are generally not suitable for cryptographic use.</p>"},{"title":"module:blossom/fnv.createHash","link":"<a href=\"module-blossom_fnv.html#.createHash\">createHash</a>"},{"title":"module:blossom/fnv~FNV","link":"<a href=\"module-blossom_fnv-FNV.html\">FNV</a>","description":"<p>Implements FNV hash function.</p>"},{"title":"module:blossom/fnv~FNV#digest","link":"<a href=\"module-blossom_fnv-FNV.html#digest\">digest</a>","description":"<p>Returns the computed FNV hash</p>"},{"title":"module:blossom/fnv~FNV#update","link":"<a href=\"module-blossom_fnv-FNV.html#update\">update</a>","description":"<p>Updates the hash function with the given data</p>"},{"title":"module:blossom/fnv~FNV#value","link":"<a href=\"module-blossom_fnv-FNV.html#value\">value</a>","description":"<p>Returns the current hash value</p>"}]}